#include "gtest/gtest.h"

#include <iostream>     // std::string
#include "heap.hpp"
#include "running_median.hpp"




#define BIG_HEAP_SIZE 1024

TEST(testHeaps, growMaxHeap){
	MaxHeap maxHeap;
	maxHeap.reserve(10);
	for (unsigned int i=0; i < BIG_HEAP_SIZE; i++)
	{
		maxHeap.insert(i);
	}
	ASSERT_EQ(BIG_HEAP_SIZE, maxHeap.getCount());
	ASSERT_LT(BIG_HEAP_SIZE, maxHeap.getCapacity());
	
}
TEST(testHeaps, growMinHeap){
	MinHeap minHeap;
	minHeap.reserve(10);
	for (unsigned int i=0; i < BIG_HEAP_SIZE; i++)
	{
		minHeap.insert(i);
	}
	ASSERT_EQ(BIG_HEAP_SIZE, minHeap.getCount());
	ASSERT_LT(BIG_HEAP_SIZE, minHeap.getCapacity());
}

TEST(testHeaps, testInsertMaxHeap){
	MaxHeap h;
	h.reserve(10);
	for (unsigned int i=0; i < BIG_HEAP_SIZE; i++)
	{
		h.insert(i);
	}
	ASSERT_EQ(BIG_HEAP_SIZE-1, h.getRoot());

}

TEST(testHeaps, testInsertMaxHeapReverse){
	MaxHeap h;
	h.reserve(10);
	for (unsigned int i=BIG_HEAP_SIZE; i >0; i--)
	{
		h.insert(i);
	}
	ASSERT_EQ(BIG_HEAP_SIZE, h.getRoot());
}
TEST(testHeaps, testInsertMinHeap){
	MinHeap h;
	h.reserve(10);
	for (unsigned int i=0; i < BIG_HEAP_SIZE; i++)
	{
		h.insert(i);
	}
	ASSERT_EQ(0, h.getRoot());

}

TEST(testHeaps, testInsertMinHeapReverse){
	MinHeap h;
	h.reserve(10);
	for (unsigned int i=BIG_HEAP_SIZE; i >0; i--)
	{
		h.insert(i);
	}
	ASSERT_EQ(1, h.getRoot());
}
inline int parent(int i)
{
	if (i <=0 ) return -1;
	return (i-1)/2;
}
TEST(testHeaps, testMaxHeap){
	MaxHeap h;
	h.insert(1);
	h.insert(9);
	h.insert(3);
	h.insert(8);
	h.insert(13);
	h.insert(15);
	h.insert(20);
	h.insert(19);
	h.insert(18);
	h.insert(40);
	int *d = h.getData();

	for (int i =1; i < h.getCount(); i++)
	{
		ASSERT_LT(d[i], d[parent(i)]);
	}
	h.removeRoot();
	for (int i =1; i < h.getCount(); i++)
	{
		ASSERT_LT(d[i], d[parent(i)]);
	}

}
TEST(testHeaps, testMinHeap){
	MinHeap h;
	h.insert(1);
	h.insert(9);
	h.insert(3);
	h.insert(8);
	h.insert(13);
	h.insert(15);
	h.insert(20);
	h.insert(19);
	h.insert(18);
	h.insert(40);
	int *d = h.getData();

	for (int i =1; i < h.getCount(); i++)
	{
		ASSERT_GT(d[i], d[parent(i)]);
	}
	h.removeRoot();
	for (int i =1; i < h.getCount(); i++)
	{
		ASSERT_GT(d[i], d[parent(i)]);
	}
}
TEST (testsMedian, testSimple)
{
	RunningMedian r;
	r.addElement(3);
	r.addElement(5);
	ASSERT_NEAR(4.0, r.getMedian(), 0.001);
	r.addElement(8);
	ASSERT_NEAR(5.0, r.getMedian(), 0.001);
	r.addElement(6);
	ASSERT_NEAR(5.5, r.getMedian(), 0.001);
}
TEST (testsMedian, testComplex1)
{


	// code generated by median_test.py
	int array_len = 10;
	float median = 586.000000;
	int arr[10] = { 466, 720, 293, 955, 363, 910, 137, 893, 141, 706 };
	// end of generated code
	RunningMedian r;
	for (int i=0; i < array_len; i ++)
		r.addElement(arr[i]);
	ASSERT_NEAR(median, r.getMedian(), 0.001);

}
TEST (testsMedian, testComplex2)
{

	// code generated by median_test.py
	int array_len = 5;
	float median = 686.000000;
	int arr[5] = { 860, 407, 686, 970, 162 };
	// end of generated code

	RunningMedian r;
	for (int i=0; i < array_len; i ++)
		r.addElement(arr[i]);
	ASSERT_NEAR(median, r.getMedian(), 0.001);

}
TEST (testsMedian, testComplex3)
{

	// code generated by median_test.py
	int array_len = 150;
	float median = 533.500000;
	int arr[150] = { 826, 484, 113, 825, 623, 267, 454, 92, 195, 54, 53, 555, 678, 318, 970, 156, 739, 578, 544, 575, 481, 201, 449, 392, 592, 886, 819, 316, 520, 974, 359, 555, 511, 217, 739, 719, 139, 680, 171, 684, 509, 616, 667, 931, 880, 892, 681, 849, 994, 53, 857, 825, 410, 917, 776, 523, 160, 984, 465, 362, 371, 595, 363, 415, 248, 43, 868, 631, 118, 990, 211, 109, 142, 155, 28, 768, 635, 155, 733, 274, 614, 901, 773, 833, 431, 819, 245, 892, 955, 303, 797, 811, 276, 546, 461, 609, 624, 349, 792, 9, 395, 5, 237, 477, 64, 359, 885, 880, 906, 885, 626, 866, 722, 870, 11, 18, 924, 264, 507, 472, 928, 681, 6, 702, 505, 476, 300, 759, 722, 805, 966, 145, 547, 820, 363, 822, 174, 951, 301, 326, 361, 354, 350, 844, 65, 729, 367, 574, 507, 231 };
	// end of generated code

	RunningMedian r;
	for (int i=0; i < array_len; i ++)
		r.addElement(arr[i]);
	ASSERT_NEAR(median, r.getMedian(), 0.001);

}


int main(int argc, char **argv)
{

  ::testing::InitGoogleTest(&argc, argv);


  return RUN_ALL_TESTS();
}
